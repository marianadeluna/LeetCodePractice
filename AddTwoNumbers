/*
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

class AddTwoNumbers {
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode answer = new ListNode(0);
        ListNode current = answer;
        int carry = 0; 
        ListNode head1 = l1;
        ListNode head2 = l2;
        
        while(head1 != null || head2 != null) {
            // sum the numbers
            int x = (head1 != null) ? head1.val : 0;
            int y = (head2 != null) ? head2.val : 0;
            int sum = x + y + carry;
            
            //calculate new carry
            carry = sum/10; //automatically rounds
            current.next = new ListNode(sum % 10);
            current = current.next;
            if(head1 != null) head1 = head1.next;
            if(head2 != null) head2 = head2.next;
        }
        if (carry > 0) {
            current.next = new ListNode(carry);
        }
        return answer.next;
    }
}
